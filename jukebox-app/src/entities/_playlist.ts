/**
 * The entity that handles the playlist data.
 */
export class PlaylistEntity {
    /**
     * The percentages of users downvote needed to skip the current track
     */
    NEGATIVE_VOTES_RATIO_TO_SKIP_TRACK = 0.3
    /**
     * Boolean that indicates if a user track is currently playing
     */
    user_track_is_playing = false
    /**
     * The current track automaticaly generated by Spotify.
     * Track id
     */
    automatic_track: string = ''
    /**
     * Queue for the tracks requested by users
     */
    users_queue: { trackId: string, username: string}[] = []
    /**
     * Array of usernames who requested to skip the current track
     */
    users_requested_next: string[] = []

    deviceId: string = ''

    /**
     * Adds tracks to the automatic queue
     * 
     * @param tracksNumberToAdd number of tracks to add to the automatic queue
     * @returns 
     */
    refreshAutomaticTrack(trackIds: string[]) {
        // refreshs the automatically generated track
        this.automatic_track = trackIds[0]
    }
    /**
     * Returns the current automatic track id
     * 
     * @param tracksData 
     * @returns 
     */
    getAutoTrackId() {
        return this.automatic_track
    }
    /**
     * Returns the array of tracks from the users queue
     * 
     * @param tracksData 
     * @returns 
     */
    getUsersQueue() {
        return this.users_queue
    }
    /**
     * Adds a track to the users queue
     * 
     * @param trackId track id to add to the users queue
     * @param username username of the user who requested the track
     */
    addTrackToUsersQueue(trackId: string, username: string) {
        this.users_queue.push({ trackId: trackId, username })
    }
    /**
     * 
     * Checks if the given track id is in the users queue
     */
    isTrackInQueue(trackId: string) {
        return this.users_queue.some(track => track.trackId === trackId)
    }
    /**
     * Checks if a given user has requested to skip the current track
     */
    hasUserRequestedNextTrack(a_username: string) {
        return this.users_requested_next.some(username => username === a_username)
    }
    /**
     * Adds a user to the list of users who requested to skip the current track
     */
    addUserToNextTrackRequest(username: string) {
        this.users_requested_next.push(username)
    }
    /**
     * Returns if true if the current track should be skipped
     */
    shouldPlayNextTrack(usersCount: number) {
        return (this.users_requested_next.length / usersCount) > this.NEGATIVE_VOTES_RATIO_TO_SKIP_TRACK
    }

    getDeviceId() {
        return this.deviceId
    }

    setDeviceId(deviceId: string) {
        this.deviceId = deviceId
    }
}
